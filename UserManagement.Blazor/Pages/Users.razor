@page "/users"
@using UserManagement.Models

@inject IUserApiClient UserApi
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDataGrid @ref="_userGrid" T="User" ServerData="ServerReload" Outlined>
    <ToolBarContent>
        <MudText Typo="Typo.h4">Users</MudText>
        <MudSpacer />
        <MudToggleGroup @bind-Value="@_filterActive" @bind-Value:after="() => _userGrid.ReloadServerData()">
            <MudToggleItem T="Nullable<bool>" Value="null">Show All</MudToggleItem>
            <MudToggleItem T="Nullable<bool>" Value="true">Active Only</MudToggleItem>
            <MudToggleItem T="Nullable<bool>" Value="false">Inactive Only</MudToggleItem>
        </MudToggleGroup>
        <MudSpacer />
        <MudButton StartIcon="@Icon.Add" Variant="Variant.Outlined" Color="Color.Primary">Add User</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="u => u.Id" />
        <PropertyColumn Property="u => u.Forename" />
        <PropertyColumn Property="u => u.Surname" />
        <PropertyColumn Property="u => u.Email" />
        <PropertyColumn Property="u => u.DateOfBirth" />
        <PropertyColumn Property="u => u.IsActive" />
        <TemplateColumn>
            <CellTemplate>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                    <MudButton StartIcon="@Icon.Person" OnClick="@(async e => await ShowUserViewDialog(context.Item))">View</MudButton>
                    <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                        <MudMenuItem Icon="@Icon.Edit">Edit</MudMenuItem>
                        <MudMenuItem Icon="@Icon.Delete" OnClick="@(async e => await ShowUserDeleteDialog(context.Item))">Delete</MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private bool? _filterActive = null;
    private MudDataGrid<User> _userGrid = default!;

    private async Task<GridData<User>> ServerReload(GridState<User> state)
    {
        var users = await UserApi.GetUsersAsync(_filterActive);

        var userArray = users.ToArray();
        return new GridData<User>
        {
            TotalItems = userArray.Length,
            Items = userArray
        };
    }

    private Task ShowUserViewDialog(User user)
    {
        return DialogService.ShowUserViewAsync(user);
    }

    private async Task ShowUserDeleteDialog(User user)
    {
        var dialog = await DialogService.ShowUserDeleteAsync(user);

        var result = await dialog.Result;
        if (result is { Canceled: false, Data: bool d } && d is true)
        {
            var deleteResult = await UserApi.DeleteUserAsync(user.Id);
            if (!deleteResult)
            {
                Snackbar.Add($"Failed to delete user with Id '{user.Id}'", Severity.Error);
            }
        }
        await _userGrid.ReloadServerData();
    }
}
